<?php

namespace app\gzh\controller;


use app\gzh\model\user\User;
use app\gzh\model\user\WechatUser;
use behavior\gzh\GzhBehavior;
use service\JsonService;
use think\Cache;
use think\Controller;
use behavior\gzhwechat\UserBehavior;
use service\HookService;
use service\UtilService;
use app\core\util\WechatService;
use think\Cookie;
use think\Request;
use think\Session;
use think\Url;

class GzhBasic extends Controller
{
    protected static $_redis = null;

    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
//        $spreadUid = Request::instance()->route('spuid',0);
//        if($spreadUid
//            && ($userInfo = User::getUserInfo(WechatUser::openidToUid($this->oauth())))
//            && !$userInfo['spread_uid']
//            && $userInfo['uid'] != $spreadUid
//        ) {
//            User::edit(['spread_uid'=>$spreadUid],$userInfo['uid'],'uid');
//            HookService::listen('update_sp',$spreadUid,null,false,UserBehavior::class);
//        }
//        HookService::listen('gzh_init',null,null,false,GzhBehavior::class);
    }
    protected function getRedis()
    {
        if (is_null(self::$_redis)) {
            self::$_redis = new \Redis();
            self::$_redis->connect('127.0.0.1', 6379);
            // self::$_redis->auth(321321);
        }
        return self::$_redis;
    }

    /**
     * 操作失败 弹窗提示
     * @param string $msg
     * @param int $url
     * @param string $title
     */
    protected function failed($msg = '操作失败', $url = 0, $title='信息提示',$code)
    {
        if($this->request->isAjax()){
            exit(JsonService::failjson($msg,$url,$code)->getContent());
        }else {
            $this->assign(compact('title', 'msg', 'url'));
            exit($this->fetch('public/error'));
        }
    }

    /**
     * 操作成功 弹窗提示
     * @param $msg
     * @param int $url
     */
    protected function successful($msg = '操作成功', $url = 0, $title='成功提醒',$code)
    {
        if($this->request->isAjax()){
            exit(JsonService::successfuljson($msg,$url,$code)->getContent());
        }else {
            $this->assign(compact('title', 'msg', 'url'));
            exit($this->fetch('public/success'));
        }
    }

    public function _empty($name)
    {
        $url = strtolower($name) == 'index' ? Url::build('Index/index','',true,true) : 0;
        return $this->failed('请求页面不存在!',$url);
    }

    /**
     * 微信用户自动登陆
     * @return string $openid
     */
    protected function oauth($spreadUid=0)
    {
        $openid = Session::get('loginOpenid','gzh');
        if($openid) return $openid;
        if(!UtilService::isWechatBrowser()) exit($this->failed('请在微信客户端打开链接'));
        if($this->request->isAjax()) exit($this->failed('请登陆!'));
        $errorNum = (int)Cookie::get('_oen');
        if($errorNum && $errorNum > 3) exit($this->failed('微信用户信息获取失败!!'));
        try{
            $wechatInfo = WechatService::oauthService()->user()->getOriginal();
        }catch (\Exception $e){
            Cookie::set('_oen',++$errorNum,900);
            exit(WechatService::oauthService()->scopes(['snsapi_base'])
                ->redirect($this->request->url(true))->send());
        }
        if(!isset($wechatInfo['nickname'])){
            $wechatInfo = WechatService::getUserInfo($wechatInfo['openid']);
            if(!$wechatInfo['subscribe'] && !isset($wechatInfo['nickname']))
                exit(WechatService::oauthService()->scopes(['snsapi_userinfo'])
                    ->redirect($this->request->url(true))->send());
            if(isset($wechatInfo['tagid_list']))
                $wechatInfo['tagid_list'] = implode(',',$wechatInfo['tagid_list']);
        }else{
            if(isset($wechatInfo['privilege'])) unset($wechatInfo['privilege']);
            $wechatInfo['subscribe'] = 0;
        }
        Cookie::delete('_oen');
        $openid = $wechatInfo['openid'];
        HookService::afterListen('gzh_oauth',$spreadUid,$wechatInfo,false,UserBehavior::class);
        Session::set('loginOpenid',$openid,'gzh');
        Cookie::set('is_login',1);
        return $openid;
    }

    /*
    * 错误操作返回json
    * @param string | array $msg 提示语或者数据
    * @param array $data 数据
    * @param int $status
    * @return json
    * */
    protected function fail($msg='error',$data=[],$status=400)
    {
        return JsonService::failjson($msg,$data,$status);
    }

}